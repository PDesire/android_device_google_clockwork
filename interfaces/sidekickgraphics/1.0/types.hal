/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.google_clockwork.sidekickgraphics@1.0;

typedef uint32_t ResourceId;

enum Status : uint32_t {
    OK,
    UNKNOWN_ERROR,
    BAD_VALUE,  // Some parameter is invalid
    UNSUPPORTED_OPERATION,  // A function is not supported in this HAL
    INSUFFICIENT_RESOURCE,  // The Sidekick can't do everything you asked
};

enum Capability : uint32_t {
    BITMAP          = 1 << 0,  // Can display bitmaps
    ROTATE_BITMAP   = 1 << 1,  // Can rotate bitmap by arbitrary angles
    SCALE_BITMAP    = 1 << 2,  // Can scale bitmap by arbitrary factors
    FLIP_BITMAP     = 1 << 3,  // Can do simple flips while blitting
    GAMMA           = 1 << 14, // Can accept gamma scaling
    READ_ALS        = 1 << 16, // Can read recommended brightness
    CONTROL_ALS     = 1 << 17, // Can adjust brightness from ambient light
    BURNIN          = 1 << 18, // Can do burnin protection
    BRIGHTNESS      = 1 << 19, // Can support multiple brightness levels
    PALETTES        = 1 << 20, // Can support multiple palettes
    NUMBER          = 1 << 24, // Can display "number font" integers
};

typedef bitfield<Capability> Capabilities;

struct Time {
    int32_t daysSinceEpoch;  // Negative means prior to (Unix) epoch
    int32_t msOffset;  // ms since midnight at the start of the day
};

enum DrawableType : uint32_t {
    BACKGROUND,
    COMPLICATION,
    GENERIC,
    NUMBER,
    AM,
    PM,
    HOUR_MINUTE_SEPARATOR,
    MINUTE_SECOND_SEPARATOR,
    HAND,
};

enum DisplayPowerState : uint32_t {
    FULL,
    IDLE,
    OFF,
    UNKNOWN
};

/*
 * Controls the Automatic Light Sensing functionality to adjust display
 * brightness without intervention from AP.
 */
enum AlsMode : uint32_t {
    OFF,     // Not going to be using it
    READ,    // Will read sensor, not requesting ALS active control
    ON       // Sidekick controls brightness
};

/*
 * Controls burn-in protection (e.g. shifting the image by several pixels).
 * Two values today, but it's an enum for future-proofing.
 */
enum BurnInMode : uint32_t {
    OFF,
    ON
};

/** https://www.w3.org/TR/PNG/ colour type 6 image */
typedef vec<uint8_t> BitmapPng8888;

struct RotationInfo {
    bool rotates;
    /** Axis of rotation relative to the image's upper left corner */
    float pivotX;
    float pivotY;
    /** Rotation rate. Negative means counterclockwise. */
    float degreesPerDay;
    /** Size of step to animate (no smoother than this). */
    /** 0 means "as smooth as possible." */
    float degreesPerStep;
    /** Determines starting position */
    Time zeroDegreesTime;
};

struct TransformInfo {
    bool transformed;  // If false, ignore the rest
    bool flipX;
    bool flipY;
    bool flip45;
    float scaleX;
    float scaleY;
};

struct BlinkInfo {
    bool blinking;
    float periodOnMs;
    float periodOffMs;
};

struct DrawableInfo {
    uint32_t width;
    uint32_t height;
    /** Whether to display or not */
    bool display;
    /** offset of the upper left corner relative to screen coordinates */
    float offsetX;
    float offsetY;
    RotationInfo rotationInfo;
    TransformInfo transformInfo;
    DrawableType type;
    BlinkInfo blink;
    uint32_t rank;   // Stacking level
    bool displayInTwm;       // Whether to show in TWM
};

/*
 * Font is a vertical strip bitmap for use by Number.
 * Fonts can have any purpose / image e.g. weekday names, and can have
 * more or fewer than 10 characters. If font has more than 10 characters,
 * number will display all characters in sequence rather than base-10.
 */

struct FontInfo {
    uint32_t width;
    uint32_t height;        // ...Of a single character
    uint32_t nCharacters;   // How many characters in this font
    uint32_t id;            // Will be used by Number
};

enum NumberSource : uint32_t {
    CUSTOM, HOUR_12, HOUR_24, MINUTE, SECOND
};

struct CustomNumber {
    Time startTime;          // What time is T=0
    int32_t startNumber;     // Value at T=0
    int32_t modulo;          // When to wrap back to 0 (same sign as increment)
    int32_t increment;       // How much to add / subtract
    float msPerIncrement;    // How often to add increment
};

struct NumberInfo {
    NumberSource source;     // Internal or specified here
    CustomNumber numberSpec; // Spec for CUSTOM numbers
    uint32_t fontId;              // Which font to use
    uint32_t digits;         // How much horizontal space to reserve
    uint32_t leadingZeroes;  // How many leading zeroes (max) to display
    uint32_t digit;          // -1 for whole number; 0..N for which
                             //   base-ten digit to display
    float transitionMs;      // Time to animate (slide) digit transitions
    bool displayInTwm;       // Whether to show in TWM
};

struct ColorCapability {
    uint32_t redBits;
    uint32_t greenBits;
    uint32_t blueBits;
    uint32_t paletteSize;
    bool gamma;
    bool oneBitAlpha;
    bool multiBitAlpha;
};

struct RGB {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
};

struct RGBA {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
    uint8_t alpha;
};

typedef vec<RGB> Palette;
